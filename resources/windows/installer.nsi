; NSIS packaging/install script
; Docs: http://nsis.sourceforge.net/Docs/Contents.html

;--------------------------------
;Include Modern UI

  !include "MUI2.nsh"

;--------------------------------
;General

  ;Name and file

!define dest "{{dest}}"
!define src "{{src}}"
!define name "{{name}}"
!define productName "{{productName}}"
!define version "{{version}}"
!define icon "{{icon}}"
!define setupIcon "{{setupIcon}}"
!define banner "{{banner}}"

!define exec "nw.exe"

; 64-bit ends up at HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\OnlyKey
!define regkey "Software\${name}"
; 64-bit ends up at HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\OnlyKey
!define uninstkey "Software\Microsoft\Windows\CurrentVersion\Uninstall\${name}"

!define uninstaller "uninstall.exe"

SetCompressor lzma

Name "${name}"
Icon "${icon}"
OutFile "${dest}"
InstallDir "$PROGRAMFILES\${name}"
InstallDirRegKey HKLM "${regkey}" ""

CRCCheck on
SilentInstall normal

ShowInstDetails hide
AutoCloseWindow false
WindowIcon off

Caption "${productName} ${version} Setup"
; Don't add sub-captions to title bar
SubCaption 3 " "
SubCaption 4 " "

;--------------------------------
;Interface Settings

  !define MUI_ICON "${setupIcon}"
  !define MUI_UNICON "${setupIcon}"
  !define MUI_HEADERIMAGE
  !define MUI_HEADERIMAGE_BITMAP "${banner}"
  !define MUI_HEADERIMAGE_UNBITMAP "${banner}"
  !define MUI_ABORTWARNING

;--------------------------------
;Pages

  !insertmacro MUI_PAGE_DIRECTORY
  !insertmacro MUI_PAGE_INSTFILES
  !insertmacro MUI_UNPAGE_CONFIRM
  
;--------------------------------
;Languages
 
  !insertmacro MUI_LANGUAGE "English"

;--------------------------------
;Installer Sections

; Installation declarations
Section "Install"
    
    WriteRegStr HKLM "${regkey}" "Install_Dir" "$INSTDIR"
    WriteRegStr HKLM "${regkey}" "DefaultIcon" "$INSTDIR\icon.ico"
    WriteRegStr HKLM "${uninstkey}" "DisplayName" "${name}"
    WriteRegStr HKLM "${uninstkey}" "DisplayIcon" "$INSTDIR\icon.ico"
    WriteRegStr HKLM "${uninstkey}" "UninstallString" "$INSTDIR\${uninstaller}"
    
    ; Remove all application files copied by previous installation
    RMDir /r "$INSTDIR"
    
    SetOutPath $INSTDIR
    
    ; Include all files from /build directory
    File /r "${src}\*"
    
    ; Create start menu shortcut
    CreateShortCut "$SMPROGRAMS\${name}.lnk" "$INSTDIR\${exec}" "" "$INSTDIR\icon.ico"
    
    WriteUninstaller "${uninstaller}"
    
SectionEnd

;--------------------------------
;Uninstaller Section

; --------------------------------
; Uninstaller
; --------------------------------

ShowUninstDetails hide

UninstallCaption "Uninstall ${productName}"
UninstallText "Follow the prompts to remove ${productName} from this computer."
UninstallIcon "${icon}"

UninstPage custom un.confirm un.confirmOnLeave
UninstPage instfiles

Var RemoveAppDataCheckbox
Var RemoveAppDataCheckbox_State

; Custom uninstall confirm page
Function un.confirm

    nsDialogs::Create 1018
    
    ${NSD_CreateLabel} 1u 1u 100% 24u "To finish removing ${productName} from your computer, press the [Uninstall] button below."

    ${NSD_CreateCheckbox} 1u 35u 100% 10u "Also remove my ${productName} personal settings"
    Pop $RemoveAppDataCheckbox

    nsDialogs::Show

FunctionEnd

Function un.confirmOnLeave
    
    ; Save checkbox state on page leave
    ${NSD_GetState} $RemoveAppDataCheckbox $RemoveAppDataCheckbox_State

FunctionEnd

; Uninstall declarations
Section "Uninstall"
    
    DeleteRegKey HKLM "${uninstkey}"
    DeleteRegKey HKLM "${regkey}"
    
    Delete "$SMPROGRAMS\${name}.lnk"
    
    ; Remove whole directory from Program Files
    RMDir /r "$INSTDIR"
    
    ; Remove also appData directory generated by your app if user checked this option
    ${If} $RemoveAppDataCheckbox_State == ${BST_CHECKED}
        RMDir /r "$LOCALAPPDATA\${name}"
    ${EndIf}
    
SectionEnd
